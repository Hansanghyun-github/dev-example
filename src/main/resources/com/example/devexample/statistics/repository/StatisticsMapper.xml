<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.devexample.statistics.repository.StatisticsMapper">
    <select id="getAmountAveragesEachMBTIAndEmotionBetweenStartDateAndEndDate" resultType="com.example.devexample.statistics.repository.dto.MBTIEmotionAmountAverageDto">
        select u.ei as mbtiFactor, a.emotion, avg(a.amount) as amountAverage
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, a.emotion
        union all
        select u.ns as mbtiFactor, a.emotion, avg(a.amount) as amountAverage
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, a.emotion
        union all
        select u.tf as mbtiFactor, a.emotion, avg(a.amount) as amountAverage
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, a.emotion
        union all
        select u.pj as mbtiFactor, a.emotion, avg(a.amount) as amountAverage
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, a.emotion
    </select>

    <select id="getAmountSumsEachMBTIAndDayBetweenStartDateAndEndDate" resultType="com.example.devexample.statistics.repository.dto.MBTIDailyAmountSumDto">
        select u.ei as mbtiFactor, date(a.created_date) as day, sum(a.amount) as amountSum
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, day
        union all
        select u.ns as mbtiFactor, date(a.created_date) as day, sum(a.amount) as amountSum
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, day
        union all
        select u.tf as mbtiFactor, date(a.created_date) as day, sum(a.amount) as amountSum
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, day
        union all
        select u.pj as mbtiFactor, date(a.created_date) as day, sum(a.amount) as amountSum
        from articles a join users_mbti_view u on(a.user_id = u.user_id)
        where a.register_type = #{registerType} and a.created_date between #{startDate} and #{endDate}
        group by mbtiFactor, day
    </select>

    <select id="getAllMemosByMBTIBetweenStartDateAndEndDate" resultType="com.example.devexample.statistics.repository.dto.AllMemoDto">
        select a.things
        from articles a
        <if test=' !"none".equals(mbti) '>
            join users u on a.user_id=u.user_id
        </if>
        where a.created_date between #{startDate} and #{endDate}
        <if test=' !"none".equals(mbti) '>
            and u.mbti = #{mbti}
        </if>
    </select>
</mapper>