# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: deploy test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  SSH:
    runs-on: ubuntu-latest
    steps:
      - run: uname -a
      - run: ls -al
      - run: pwd
      - name: secret key
        env:
            KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: echo "$KEY" > private_key && chmod 600 private_key
      - name: test host and user
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USER }}
        run: |
          echo $HOST
          echo $USERNAME
          echo ${HOST}
          echo ${USERNAME}
      - name: Build & Deploy
        env:
            HOST: ${{ secrets.HOST }}
            USERNAME: ${{ secrets.USER }}
        run: |
          ssh -i private_key $USERNAME@$HOST

          # after connecting aws ec2
          cd dev-example
          git fetch --all
          git pull
          sudo ./gradlew
          nohup java -jar build/libs/dev-example-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev > ../spring.out &
              

